# Not all computer experiments are costly, some run rather
# quickly. If experiments were run without a proper design,
# there may be design points too close together, which could
# give very similar results and hence are unnecessary.

# It may be desirable to find a subset of the design that
# will still give good analytic properties. This function
# finds a subset of the original design that is similar to a
# maximin design.

# The algorithm is adapted from Morris and Mitchell (1995)
# "Exploratory designs for computational experiments" and
# Joseph and Hung (2008) "Orthogonal-maximin Latin
# hypercube designs"

near.maximin = function(design, m, p=2, alp1=1, alp2=1, niter=10000,
    print.h=FALSE){
    # design: the current design
    # m: the number of design points to use in the subset
    calc.phi = function(DIST)
        apply(1/(DIST^p+diag(Inf, m)), 1, sum)^(1/p)
    x = as.matrix(design)
    n = nrow(x)
    k = ncol(x)

    all.dist = as.matrix(dist(x))

    # initial sample
    test.index = sample(n, m)
    test.x = x[test.index, ]
    
    # weights for new samples
    h = double(n)+1

    count = 0
    while (count < niter){
        count = count + 1
        z = calc.phi(all.dist[test.index, test.index])
        move = sample(m, 1, prob=(z^alp1)/sum(z^alp1))
        h[test.index[move]] = h[test.index[move]] + 1
        h[test.index[-move]] = h[test.index[-move]] - 1/(2*m)
        h = ifelse(h < 1, 1, h)
        g = 1/h[-test.index]
        new = sample((1:n)[-test.index], 1, prob=(g^alp2)/sum(g^alp2))
        test.x[move,] = x[new,]
        test.index[move] = new
#       plot(x)
#       points(test.x, pch=20, col='red', lwd=8)
#       Sys.sleep(0.01)
        }
    out = x[order(h)[1:m],]
    plot(out)

    if (print.h)
        print(h)
    return(out)
    }

n = 200
k = 2
x = matrix(runif(n*k), n, k)
m = 10

library(randtoolbox)
x = sobol(n, k)

x = matrix(c(0.1, 0.9, 0.1, 0.8, 0.2, 0.9, 0.2, 0.8,
    0.15, 0.3, 0.7, 0.85, 0.65, 0.35, 0.8, 0.2), 8, 2, byrow=T)
plot(x)
points(near.maximin(x, nrow(x)/2, alp1=10), col='red', cex=2)
points(near.maximin(x, nrow(x)/2, alp2=10), col='blue', cex=4)
points(near.maximin(x, nrow(x)/2, p=10), col='green', cex=6)
points(near.maximin(x, nrow(x)/2, p=10, alp1=10, alp2=10), col='orange', cex=8)

out1 = near.maximin(x, m, p=1, niter=10000, alp1=1, alp2=1)
out2 = near.maximin(x, m, p=1, niter=10000, alp1=1, alp2=20)
out3 = near.maximin(x, m, p=1, niter=10000, alp1=20, alp2=1)
out4 = near.maximin(x, m, p=1, niter=10000, alp1=50, alp2=50)

plot(x, xlim=c(0,1), ylim=c(0,1))
points(jitter(out1, 1), col='red', lwd=2)
points(jitter(out2, 1), col='green', lwd=2)
points(jitter(out3, 1), col='blue', lwd=2)
points(jitter(out4, 1), col='yellow', lwd=2)



### AFRL EXAMPLE
dat = read.csv("~/files/afrl_project/dat/triflate_samples.csv",
    sep=",", header=FALSE)

x = as.vector(as.matrix(dat[1, 23:33]))
ord = order(x)
x = x[ord]

design = matrix(as.numeric(as.matrix(dat[-1, c(1:20)[-18]])), 9930, 19)

# re-scale
for (i in 1:19){
    design[,i] = (design[,i] - min(design[,i])) /
        (max(design[,i]) - min(design[,i]))
    }
# remove duplicate rows
design = unique(design)


n = dim(design)[1]
m = ceiling(n*0.1)

times = matrix(0, 100, 3)
for (i in 1:100)
    times[i,] = system.time(near.maximin(design, m, p=1, niter=i, alp1=20, alp2=20))[1:3]
plot(times[,1])
points(times[,3],col='red')

points(times[,2],col='blue')

y = times[,1]
x = 1:100
mod = lm(y ~ x)
### END AFRL EXAMPLE
